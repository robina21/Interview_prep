{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home: index.md Python Interview Questions: python_interview.md Pandas Interview Questions: pandas_interview_questions.md","title":"Home"},{"location":"pandas_interview_questions/","text":"Pandas Interview Questions for Data Engineers (with Explanations) \ud83d\udce5 Data Loading & Exploration Q1. How do you read a large CSV file in chunks using Pandas? Use chunksize to load the file in smaller parts to save memory. chunks = pd.read_csv('data.csv', chunksize=10000) for chunk in chunks: process(chunk) Q2. How do you get a quick summary of a DataFrame? Use info() , describe() , and head() to get structure, statistics, and sample data. df.info() df.describe() df.head() Q3. How do you detect missing values? Use isnull().sum() to count nulls per column. df.isnull().sum() \ud83e\uddf9 Data Cleaning Q4. How to drop rows with any null values? dropna() removes all rows with at least one NaN. df.dropna() Q5. How to fill missing values with the median of a column? fillna() can fill NaNs with median, mean, or custom values. df['column'].fillna(df['column'].median(), inplace=True) Q6. How to convert a column to datetime? Use pd.to_datetime() to ensure proper datetime parsing. df['date'] = pd.to_datetime(df['date']) Q7. How to remove duplicates from a DataFrame? drop_duplicates() keeps the first instance and drops repeated rows. df.drop_duplicates(inplace=True) \ud83d\udd0d Filtering, Sorting & Mapping Q8. How to filter rows where salary > 100K and department = 'IT'? Use boolean conditions with & for AND logic. df[(df['salary'] > 100000) & (df['department'] == 'IT')] Q9. How to apply a function to a column? Use apply() to perform row-wise or column-wise transformations. df['salary_bracket'] = df['salary'].apply(lambda x: 'High' if x > 100000 else 'Low') Q10. How to sort data by two columns? Use sort_values() with ascending flags. df.sort_values(by=['department', 'salary'], ascending=[True, False]) \ud83d\udd01 GroupBy & Aggregation Q11. How to group by department and calculate average salary? groupby() with aggregation helps summarize data. df.groupby('department')['salary'].mean() Q12. How to get count and sum in one groupby operation? agg() allows multiple aggregations on grouped data. df.groupby('department').agg({'salary': ['count', 'sum']}) \ud83d\udd17 Joins & Merges Q13. How to perform an inner join on two DataFrames? pd.merge() works like SQL JOINs. pd.merge(df1, df2, on='id', how='inner') Q14. How to do a left join using different column names? You can specify different key names using left_on and right_on . pd.merge(df1, df2, left_on='emp_id', right_on='id', how='left') \ud83d\udccf Reshaping Data Q15. How to pivot a table to summarize data? Use pivot_table() to create cross-tabulations. df.pivot_table(index='department', columns='gender', values='salary', aggfunc='mean') Q16. How to melt a wide table into a long format? melt() is useful for unpivoting columns into rows. pd.melt(df, id_vars=['id'], var_name='attribute', value_name='value') \ud83e\udde0 Optimization & Performance Q17. How do you handle memory issues with large data sets? Use dtype , usecols , and chunksize to control memory usage. Q18. How to optimize string columns? Convert strings to category dtype for better performance. df['category_column'] = df['category_column'].astype('category') \ud83d\udcc6 Date & Time Operations Q19. How to extract year and month from a datetime column? Use dt accessor to break down datetime parts. df['year'] = df['date'].dt.year df['month'] = df['date'].dt.month Q20. How to calculate the number of days between two dates? Subtract datetime columns and use .dt.days . df['days'] = (df['end_date'] - df['start_date']).dt.days \ud83e\uddea Real-World Case Q21. You get a daily CSV dump with millions of rows. How do you deduplicate and load only new records into a database? Use chunking, hash comparison, and staging tables to identify new data before loading. Q22. How to check for data consistency between two large DataFrames (e.g., source vs target)? Compare with .equals() or find differences using concat() and drop_duplicates() . df1.equals(df2) pd.concat([df1, df2]).drop_duplicates(keep=False) \u2705 Interview Tips Practice real-world data cleanup and profiling. Be fluent in joins, groupby, filtering, and performance tuning. Know how to work with large files and time-based operations.","title":"Pandas Interview Questions for Data Engineers (with Explanations)"},{"location":"pandas_interview_questions/#pandas-interview-questions-for-data-engineers-with-explanations","text":"","title":"Pandas Interview Questions for Data Engineers (with Explanations)"},{"location":"pandas_interview_questions/#data-loading-exploration","text":"Q1. How do you read a large CSV file in chunks using Pandas? Use chunksize to load the file in smaller parts to save memory. chunks = pd.read_csv('data.csv', chunksize=10000) for chunk in chunks: process(chunk) Q2. How do you get a quick summary of a DataFrame? Use info() , describe() , and head() to get structure, statistics, and sample data. df.info() df.describe() df.head() Q3. How do you detect missing values? Use isnull().sum() to count nulls per column. df.isnull().sum()","title":"\ud83d\udce5 Data Loading &amp; Exploration"},{"location":"pandas_interview_questions/#data-cleaning","text":"Q4. How to drop rows with any null values? dropna() removes all rows with at least one NaN. df.dropna() Q5. How to fill missing values with the median of a column? fillna() can fill NaNs with median, mean, or custom values. df['column'].fillna(df['column'].median(), inplace=True) Q6. How to convert a column to datetime? Use pd.to_datetime() to ensure proper datetime parsing. df['date'] = pd.to_datetime(df['date']) Q7. How to remove duplicates from a DataFrame? drop_duplicates() keeps the first instance and drops repeated rows. df.drop_duplicates(inplace=True)","title":"\ud83e\uddf9 Data Cleaning"},{"location":"pandas_interview_questions/#filtering-sorting-mapping","text":"Q8. How to filter rows where salary > 100K and department = 'IT'? Use boolean conditions with & for AND logic. df[(df['salary'] > 100000) & (df['department'] == 'IT')] Q9. How to apply a function to a column? Use apply() to perform row-wise or column-wise transformations. df['salary_bracket'] = df['salary'].apply(lambda x: 'High' if x > 100000 else 'Low') Q10. How to sort data by two columns? Use sort_values() with ascending flags. df.sort_values(by=['department', 'salary'], ascending=[True, False])","title":"\ud83d\udd0d Filtering, Sorting &amp; Mapping"},{"location":"pandas_interview_questions/#groupby-aggregation","text":"Q11. How to group by department and calculate average salary? groupby() with aggregation helps summarize data. df.groupby('department')['salary'].mean() Q12. How to get count and sum in one groupby operation? agg() allows multiple aggregations on grouped data. df.groupby('department').agg({'salary': ['count', 'sum']})","title":"\ud83d\udd01 GroupBy &amp; Aggregation"},{"location":"pandas_interview_questions/#joins-merges","text":"Q13. How to perform an inner join on two DataFrames? pd.merge() works like SQL JOINs. pd.merge(df1, df2, on='id', how='inner') Q14. How to do a left join using different column names? You can specify different key names using left_on and right_on . pd.merge(df1, df2, left_on='emp_id', right_on='id', how='left')","title":"\ud83d\udd17 Joins &amp; Merges"},{"location":"pandas_interview_questions/#reshaping-data","text":"Q15. How to pivot a table to summarize data? Use pivot_table() to create cross-tabulations. df.pivot_table(index='department', columns='gender', values='salary', aggfunc='mean') Q16. How to melt a wide table into a long format? melt() is useful for unpivoting columns into rows. pd.melt(df, id_vars=['id'], var_name='attribute', value_name='value')","title":"\ud83d\udccf Reshaping Data"},{"location":"pandas_interview_questions/#optimization-performance","text":"Q17. How do you handle memory issues with large data sets? Use dtype , usecols , and chunksize to control memory usage. Q18. How to optimize string columns? Convert strings to category dtype for better performance. df['category_column'] = df['category_column'].astype('category')","title":"\ud83e\udde0 Optimization &amp; Performance"},{"location":"pandas_interview_questions/#date-time-operations","text":"Q19. How to extract year and month from a datetime column? Use dt accessor to break down datetime parts. df['year'] = df['date'].dt.year df['month'] = df['date'].dt.month Q20. How to calculate the number of days between two dates? Subtract datetime columns and use .dt.days . df['days'] = (df['end_date'] - df['start_date']).dt.days","title":"\ud83d\udcc6 Date &amp; Time Operations"},{"location":"pandas_interview_questions/#real-world-case","text":"Q21. You get a daily CSV dump with millions of rows. How do you deduplicate and load only new records into a database? Use chunking, hash comparison, and staging tables to identify new data before loading. Q22. How to check for data consistency between two large DataFrames (e.g., source vs target)? Compare with .equals() or find differences using concat() and drop_duplicates() . df1.equals(df2) pd.concat([df1, df2]).drop_duplicates(keep=False)","title":"\ud83e\uddea Real-World Case"},{"location":"pandas_interview_questions/#interview-tips","text":"Practice real-world data cleanup and profiling. Be fluent in joins, groupby, filtering, and performance tuning. Know how to work with large files and time-based operations.","title":"\u2705 Interview Tips"},{"location":"python_interview/","text":"Python Interview Questions for Data Engineers \ud83e\udde0 Basics Q1. What are Python's key features? - Interpreted, dynamically typed, object-oriented, open-source, and has extensive libraries. Q2. What\u2019s the difference between is and == in Python? - == compares values, is checks identity (memory location). Q3. How do you swap two variables without a temporary variable? a, b = b, a Q4. What's the difference between a list and a tuple? - Lists are mutable; tuples are immutable and faster. \ud83e\uddf1 Data Structures & Algorithms Q5. How do you implement a queue in Python? from collections import deque queue = deque() queue.append('a') queue.popleft() Q6. How to find duplicates in a list? seen = set() dupes = [x for x in lst if x in seen or seen.add(x)] Q7. What is a dictionary and how is it used? - Key-value mapping. Fast lookups using hash tables. Q8. How do you sort a dictionary by values? sorted_dict = dict(sorted(my_dict.items(), key=lambda item: item[1])) \ud83d\udd04 Loops & Comprehensions Q9. What is a list comprehension? [x for x in range(10) if x % 2 == 0] Q10. What is a generator? def gen(): for i in range(5): yield i \ud83d\uddc3\ufe0f File Handling & Error Handling Q11. How to read a file line by line? with open('file.txt') as f: for line in f: print(line) Q12. How does Python handle exceptions? try: 1/0 except ZeroDivisionError: print(\"Cannot divide by zero\") \ud83d\udcca Data Analysis (Pandas / NumPy) Q13. How do you handle missing data in pandas? df.dropna(), df.fillna(0) Q14. How to group data in pandas? df.groupby('column').agg({'sales': 'sum'}) Q15. How to filter rows in a DataFrame? df[df['value'] > 100] \ud83d\udee0\ufe0f Advanced Topics for Data Engineering Q20. What is a Python decorator? def decorator(func): def wrapper(): print(\"Before\") func() print(\"After\") return wrapper Q21. How do you read a large file without loading into memory? with open('large.csv') as f: for line in f: process(line) Q22. What is the GIL in Python? - Global Interpreter Lock prevents multiple native threads from executing Python bytecodes at once. \u2705 Tips for Interviews Focus on writing clean and readable code Know common libraries: pandas , numpy , collections , itertools Be able to explain your reasoning out loud","title":"Python Interview Questions for Data Engineers"},{"location":"python_interview/#python-interview-questions-for-data-engineers","text":"","title":"Python Interview Questions for Data Engineers"},{"location":"python_interview/#basics","text":"Q1. What are Python's key features? - Interpreted, dynamically typed, object-oriented, open-source, and has extensive libraries. Q2. What\u2019s the difference between is and == in Python? - == compares values, is checks identity (memory location). Q3. How do you swap two variables without a temporary variable? a, b = b, a Q4. What's the difference between a list and a tuple? - Lists are mutable; tuples are immutable and faster.","title":"\ud83e\udde0 Basics"},{"location":"python_interview/#data-structures-algorithms","text":"Q5. How do you implement a queue in Python? from collections import deque queue = deque() queue.append('a') queue.popleft() Q6. How to find duplicates in a list? seen = set() dupes = [x for x in lst if x in seen or seen.add(x)] Q7. What is a dictionary and how is it used? - Key-value mapping. Fast lookups using hash tables. Q8. How do you sort a dictionary by values? sorted_dict = dict(sorted(my_dict.items(), key=lambda item: item[1]))","title":"\ud83e\uddf1 Data Structures &amp; Algorithms"},{"location":"python_interview/#loops-comprehensions","text":"Q9. What is a list comprehension? [x for x in range(10) if x % 2 == 0] Q10. What is a generator? def gen(): for i in range(5): yield i","title":"\ud83d\udd04 Loops &amp; Comprehensions"},{"location":"python_interview/#file-handling-error-handling","text":"Q11. How to read a file line by line? with open('file.txt') as f: for line in f: print(line) Q12. How does Python handle exceptions? try: 1/0 except ZeroDivisionError: print(\"Cannot divide by zero\")","title":"\ud83d\uddc3\ufe0f File Handling &amp; Error Handling"},{"location":"python_interview/#data-analysis-pandas-numpy","text":"Q13. How do you handle missing data in pandas? df.dropna(), df.fillna(0) Q14. How to group data in pandas? df.groupby('column').agg({'sales': 'sum'}) Q15. How to filter rows in a DataFrame? df[df['value'] > 100]","title":"\ud83d\udcca Data Analysis (Pandas / NumPy)"},{"location":"python_interview/#advanced-topics-for-data-engineering","text":"Q20. What is a Python decorator? def decorator(func): def wrapper(): print(\"Before\") func() print(\"After\") return wrapper Q21. How do you read a large file without loading into memory? with open('large.csv') as f: for line in f: process(line) Q22. What is the GIL in Python? - Global Interpreter Lock prevents multiple native threads from executing Python bytecodes at once.","title":"\ud83d\udee0\ufe0f Advanced Topics for Data Engineering"},{"location":"python_interview/#tips-for-interviews","text":"Focus on writing clean and readable code Know common libraries: pandas , numpy , collections , itertools Be able to explain your reasoning out loud","title":"\u2705 Tips for Interviews"}]}